# 8-1-1 형식으로 코드를 작성하면 심각한 문제가 생길 수 있다.
# f(n) 함수에서 n이 커지면 커질수록 수행 시간이 기하급수적으로 늘어나기 때문이다.
# n = 30이면, 약 10억 가량의 연산을 수행해야 한다.
# 동일한 함수가 반복적으로 호출되는데, 이미 한 번 계산했지만,
# 계속 호출할 때마다 계산하게 된다.
# 이처럼 피보나치 수열의 점화식을 재귀 함수를 사용해 만들 수는 있지만,
# 단순히 매번 계산하도록 하면 문제를 효율적으로 해결할 수 없다.
# 다이나믹 프로그래밍을 사용하여 효율적으로 해결할 수 있는데, 다음 조건을 만족할 때
# 사용할 수 있다.
# 1. 큰 문제를 작은 문제로 나눌 수 있다.
# 2. 작은 문제에서 구한 정답은 그것을 포함하는 큰 문제에서도 동일하다.
# 피보나치 수열은 이러한 조건을 만족하는 대표 문제이다.
# 이 문제를 메모이제이션(Memoization)기법을 사용해 해결해보자.
# 메모이제이션은 다이나믹 프로그래밍을 구현하는 방법 중 한 종류로, 한 번 구한
# 결과를 메모리 공간에 메모해두고 같은 식을 다시 호출하면 메모한 결과를 그대로
# 가져오는 기법을 의미한다.
# 메모이제이션은 값을 저장하는 방법이므로 캐싱(Caching)이라고도 한다.

# 한 번 계산된 결과를 메모이제이션(Memoization)하기 위한 리스트 초기화
d = [0] * 100

# 피보나치 함수(Fibonacci Function)를 재귀함수로 구현(탑다운 다이나믹 프로그래밍)
def fibo(x):
    # 종료 조건(1 혹은 2일 때 1을 반환)
    if x == 1 or x == 2:
        return 1
    # 이미 계산한 적 있는 문제라면 그대로 반환
    if d[x] != 0:
        return d[x]
    # 아직 계산하지 않은 문제라면 점화식에 따라서 피보나치 결과 반환
    d[x] = fibo(x - 1) + fibo(x - 2)
    return d[x]

print(fibo(99))